apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx
  namespace: argocd

  # By default, deleting an application will not perform a cascade delete, thereby deleting its resources.
  # You must add the finalizer if you want this behaviour
  finalizers:
    - resources-finalizer.argocd.argoproj.io

spec:
  project: default
  syncPolicy:
    syncOptions:
      # allows skipping syncing resources that are already in the desired state
      - ApplyOutOfSyncOnly=true
      # allows using background deletion during syncing
      - PrunePropagationPolicy=background
      # Create namespace at application creation
      - CreateNamespace=true
  source:
    chart: ingress-nginx
    repoURL: "https://kubernetes.github.io/ingress-nginx"
    targetRevision: 4.2.3
    helm:
      # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
      parameters:
        # Warning: does not change resources order list. Resources are being updated in overlays. It will break kustomize patch.
        ## Resources ##
        - name: controller.resources.requests.memory
          value: "650Mi"
        - name: controller.resources.limits.memory
          value: "650Mi"
        - name: controller.resources.requests.cpu
          value: "250m"

        ## Replica ##
        - name: controller.autoscaling.enabled
          value: "true"
        - name: controller.autoscaling.minReplicas
          value: "1"
        - name: controller.autoscaling.maxReplicas
          value: "2"
        # Warning: does not change resources order list. Resources are being updated in overlays. It will break kustomize patch.

        ## Monitoring ##
        - name: controller.metrics.enabled
          value: "true"
        #- name: controller.metrics.serviceMonitor.enabled
        #  value: "true"
        #- name: controller.metrics.serviceMonitor.namespace
        #  value: "ingress-nginx"
        #- name: controller.metrics.serviceMonitor.namespaceSelector.matchNames[0]
        #  value: "ingress-nginx"
        #- name: controller.metrics.serviceMonitor.additionalLabels.release # mandatory for prometheus stack to discover this serviceMonitor.
        #  value: "observability-kube-prometheus"

        ## Alerting ##
        - name: controller.metrics.prometheusRule.enabled
          value: "true"
        - name: controller.metrics.prometheusRule.namespace
          value: "ingress-nginx"
        - name: controller.metrics.prometheusRule.additionalLabels.release # mandatory for prometheus stack to discover this serviceMonitor.
          value: "observability-kube-prometheus"

      # Note: Those rules will be deployed for all nginx controller in the cluster with monitoring activated.

      values: |
        controller:
          service:
            annotations:
              client-max-body-size: "0"
              nginx.ingress.kubernetes.io/proxy-body-size: "0"
              proxy-read-timeout: 86400s
             # Note: if use aws load balancer
             #service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
             #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
             #service.beta.kubernetes.io/aws-load-balancer-ssl-cert: your-arn
             #service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: ELBSecurityPolicy-2016-08
             #service.beta.kubernetes.io/aws-load-balancer-ssl-ports: https
             #service.beta.kubernetes.io/aws-load-balancer-type: nlb 
          metrics:
            prometheusRule:
              rules: 
                # Note: removed for now, too many false positive
                # - alert: NginxHighHttp4xxErrorRate
                #   expr: sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests{status=~"^4.."}[3m])) / sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests[3m])) * 100 > 5
                #   for: 3m
                #   labels:
                #     severity: critical
                #   annotations:
                #     summary: "Nginx high HTTP 4xx error rate"
                #     description: "Too many HTTP requests with status 4xx (> 5%)"
                #     # runbook_url: ""

                - alert: NginxHighHttp5xxErrorRate
                  expr: sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests{status=~"^5.."}[1m])) / sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests[1m])) * 100 > 5
                  for: 1m
                  labels:
                    severity: critical
                  annotations:
                    summary: "Nginx high HTTP 5xx error rate"
                    description: "Too many HTTP requests with status 5xx (> 5%)"
                    # runbook_url: ""

                - alert: NginxLatencyHigh
                  expr: histogram_quantile(0.99, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket[2m])) by (host, instance)) > 3
                  for: 2m
                  labels:
                    severity: warning
                  annotations:
                    summary: "Nginx latency high"
                    description: "Nginx p99 latency is higher than 3 seconds"
                    # runbook_url: ""

  destination:
    server: "https://kubernetes.default.svc"
    namespace: ingress-nginx

  ignoreDifferences:
    - kind: Service
      name: ingress-nginx-controller
      namespace: ingress-nginx
      jsonPointers:
        - /spec/ipFamilies
        - /spec/ipFamilyPolicy
